"""
Django settings for django_server project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import datetime
import os
import os.path as path
from pathlib import Path

import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def load_dotenv():
    dotenv_path = path.join(BASE_DIR, ".env")
    example_dotenv_path = path.join(BASE_DIR, ".env.example")

    env_path = dotenv.find_dotenv(filename=dotenv_path, raise_error_if_not_found=True)
    if not env_path:
        env_path = dotenv.find_dotenv(
            filename=example_dotenv_path, raise_error_if_not_found=True
        )

    if env_path:
        dotenv.load_dotenv(env_path)

    dotenv.load_dotenv(dotenv_path)


load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.getenv("DEBUG", "false") == "true"
DEBUG = True

ALLOWED_HOSTS = ["*"]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWS_CREDENTIALS = True

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(weeks=1),
}

# Application definition

INSTALLED_APPS = [
    # Third-party apps
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "channels",
    "daphne",
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # My apps
    "django_app",
    "django_auth",
    "container",
]

# Websocket
ASGI_APPLICATION = "django_server.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    }
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "django_server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_server.wsgi.application"


# Database
LOCAL_DATABASE_HOST = os.getenv("LOCAL_DATABASE_HOST")
DOCKER_DATABASE_HOST = os.getenv("DOCKER_DATABASE_HOST")
PRODUCTION_DATABASE_HOST = os.getenv("PRODUCTION_DATABASE_HOST")

IS_PRODUCTION = os.getenv("IS_PRODUCTION", "false") == "true"
IS_DOCKER = os.getenv("DOCKER", "false") == "true"

if IS_PRODUCTION and PRODUCTION_DATABASE_HOST:
    DATABASE_HOST = PRODUCTION_DATABASE_HOST
elif IS_DOCKER and DOCKER_DATABASE_HOST:
    DATABASE_HOST = DOCKER_DATABASE_HOST
elif LOCAL_DATABASE_HOST:
    DATABASE_HOST = LOCAL_DATABASE_HOST
else:
    exit("No database host specified")

DATABASES = {
    "default": {
        "ENGINE": "djongo",
        "NAME": os.getenv("DATABASE_NAME"),
        "HOST": DATABASE_HOST,
        "PORT": int(os.getenv("DATABASE_PORT")),  # type: ignore
        "USERNAME": os.getenv("DATABASE_USERNAME"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "AUTH_SOURCE": "admin",
        "AUTH_MECHANISM": "SCRAM-SHA-1",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
